{"version":3,"sources":["../src/hooks.ts"],"sourcesContent":["import type { HookContext } from '@deeep-network/riptide'\nimport { spawn } from 'child_process'\n\ninterface MyriaSecrets {\n  apiKey?: string\n}\n\nlet myriaSecrets: MyriaSecrets = {}\n\nmodule.exports = {\n  installSecrets: async ({ logger, secrets }: HookContext) => {\n    logger.info('Installing Myria secrets')\n    \n    // Install Myria if not already installed\n    try {\n      await installMyriaIfNeeded(logger)\n    } catch (error) {\n      logger.error(`Failed to install Myria: ${error}`)\n      return { success: false, error: `Myria installation failed: ${error}` }\n    }\n    \n    // Extract API key from secrets\n    if (secrets && secrets.MYRIA_API_KEY) {\n      myriaSecrets.apiKey = secrets.MYRIA_API_KEY\n      logger.info('Myria API key installed successfully')\n      return { success: true }\n    } else {\n      logger.error('Myria API key not found in secrets')\n      return { success: false, error: 'MYRIA_API_KEY not provided' }\n    }\n  },\n\n  start: async ({ logger }: HookContext) => {\n    logger.info('Starting Myria node')\n    \n    if (!myriaSecrets.apiKey) {\n      logger.error('Cannot start Myria: API key not installed')\n      return { success: false, error: 'API key not available' }\n    }\n\n    try {\n      // Start Myria node with API key\n      const result = await runMyriaCommand('--start', myriaSecrets.apiKey, logger)\n      \n      if (result.success) {\n        logger.info('Myria node started successfully')\n        return { success: true }\n      } else {\n        logger.error(`Failed to start Myria: ${result.error}`)\n        return { success: false, error: result.error }\n      }\n    } catch (error) {\n      logger.error(`Error starting Myria: ${error}`)\n      return { success: false, error: error instanceof Error ? error.message : String(error) }\n    }\n  },\n\n  health: async ({ logger }: HookContext) => {\n    logger.debug('Checking Myria node health')\n    \n    try {\n      // Get Myria status\n      const result = await runMyriaCommand('--status', '', logger)\n      \n      if (result.success && result.output) {\n        // Parse the status output to determine health\n        const isHealthy = parseMyriaStatus(result.output)\n        logger.debug(`Myria health check: ${isHealthy ? 'healthy' : 'unhealthy'}`)\n        return isHealthy\n      } else {\n        logger.warn(`Health check failed: ${result.error}`)\n        return false\n      }\n    } catch (error) {\n      logger.error(`Health check error: ${error}`)\n      return false\n    }\n  },\n\n  stop: async ({ logger }: HookContext) => {\n    logger.info('Stopping Myria node')\n    \n    if (!myriaSecrets.apiKey) {\n      logger.error('Cannot stop Myria: API key not installed')\n      return { success: false, error: 'API key not available' }\n    }\n\n    try {\n      // Stop Myria node with API key\n      const result = await runMyriaCommand('--stop', myriaSecrets.apiKey, logger)\n      \n      if (result.success) {\n        logger.info('Myria node stopped successfully')\n        return { success: true }\n      } else {\n        logger.error(`Failed to stop Myria: ${result.error}`)\n        return { success: false, error: result.error }\n      }\n    } catch (error) {\n      logger.error(`Error stopping Myria: ${error}`)\n      return { success: false, error: error instanceof Error ? error.message : String(error) }\n    }\n  }\n}\n\n// Helper function to run Myria commands\nasync function runMyriaCommand(command: string, apiKey: string, logger: any): Promise<{ success: boolean; output?: string; error?: string }> {\n  return new Promise((resolve) => {\n    logger.debug(`Running: myria-node ${command}`)\n    \n    const myriaProcess = spawn('myria-node', [command], {\n      stdio: ['pipe', 'pipe', 'pipe']\n    })\n\n    let output = ''\n    let errorOutput = ''\n\n    myriaProcess.stdout.on('data', (data) => {\n      const chunk = data.toString()\n      output += chunk\n      logger.debug(`Myria stdout: ${chunk}`)\n    })\n\n    myriaProcess.stderr.on('data', (data) => {\n      const chunk = data.toString()\n      errorOutput += chunk\n      logger.debug(`Myria stderr: ${chunk}`)\n    })\n\n    // Handle API key prompt\n    myriaProcess.stdin.write(apiKey + '\\n')\n\n    myriaProcess.on('close', (code) => {\n      if (code === 0) {\n        resolve({ success: true, output })\n      } else {\n        resolve({ success: false, error: errorOutput || `Process exited with code ${code}` })\n      }\n    })\n\n    myriaProcess.on('error', (error) => {\n      resolve({ success: false, error: error.message })\n    })\n  })\n}\n\n// Helper function to install Myria if needed\nasync function installMyriaIfNeeded(logger: any): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Check if Myria is already installed\n    const checkProcess = spawn('which', ['myria-node'])\n    \n    checkProcess.on('close', (code) => {\n      if (code === 0) {\n        logger.info('Myria already installed')\n        resolve()\n        return\n      }\n      \n      // Myria not installed, install it now\n      logger.info('Installing Myria...')\n      const installProcess = spawn('wget', ['https://downloads-builds.myria.com/node/install.sh', '-O', '-'], {\n        stdio: ['ignore', 'pipe', 'pipe']\n      })\n      \n      const bashProcess = spawn('bash', [], {\n        stdio: ['pipe', 'pipe', 'pipe']\n      })\n      \n      installProcess.stdout.pipe(bashProcess.stdin)\n      \n      let installOutput = ''\n      bashProcess.stdout.on('data', (data) => {\n        installOutput += data.toString()\n        logger.debug(`Myria install: ${data.toString()}`)\n      })\n      \n      bashProcess.stderr.on('data', (data) => {\n        logger.debug(`Myria install stderr: ${data.toString()}`)\n      })\n      \n      bashProcess.on('close', (code) => {\n        if (code === 0) {\n          logger.info('Myria installed successfully')\n          resolve()\n        } else {\n          logger.error(`Myria installation failed with code ${code}`)\n          reject(new Error(`Installation failed with code ${code}`))\n        }\n      })\n      \n      installProcess.on('error', (error) => {\n        reject(error)\n      })\n    })\n    \n    checkProcess.on('error', (error) => {\n      reject(error)\n    })\n  })\n}\n\n// Helper function to parse Myria status output\nfunction parseMyriaStatus(statusOutput: string): boolean {\n  try {\n    // Look for status indicators in the output\n    // Example: \"Current Cycle Status: running\"\n    const statusMatch = statusOutput.match(/Current Cycle Status:\\s*(\\w+)/i)\n    \n    if (statusMatch) {\n      const status = statusMatch[1].toLowerCase()\n      return status === 'running'\n    }\n    \n    // Fallback: check if we got node information\n    return statusOutput.includes('Node ID:') && statusOutput.includes('Current Cycle Uptime:')\n  } catch (error) {\n    return false\n  }\n}\n"],"mappings":";;;AACA,2BAAsB;AAMtB,IAAI,eAA6B,CAAC;AAElC,OAAO,UAAU;AAAA,EACf,gBAAgB,OAAO,EAAE,QAAQ,QAAQ,MAAmB;AAC1D,WAAO,KAAK,0BAA0B;AAGtC,QAAI;AACF,YAAM,qBAAqB,MAAM;AAAA,IACnC,SAAS,OAAO;AACd,aAAO,MAAM,4BAA4B,KAAK,EAAE;AAChD,aAAO,EAAE,SAAS,OAAO,OAAO,8BAA8B,KAAK,GAAG;AAAA,IACxE;AAGA,QAAI,WAAW,QAAQ,eAAe;AACpC,mBAAa,SAAS,QAAQ;AAC9B,aAAO,KAAK,sCAAsC;AAClD,aAAO,EAAE,SAAS,KAAK;AAAA,IACzB,OAAO;AACL,aAAO,MAAM,oCAAoC;AACjD,aAAO,EAAE,SAAS,OAAO,OAAO,6BAA6B;AAAA,IAC/D;AAAA,EACF;AAAA,EAEA,OAAO,OAAO,EAAE,OAAO,MAAmB;AACxC,WAAO,KAAK,qBAAqB;AAEjC,QAAI,CAAC,aAAa,QAAQ;AACxB,aAAO,MAAM,2CAA2C;AACxD,aAAO,EAAE,SAAS,OAAO,OAAO,wBAAwB;AAAA,IAC1D;AAEA,QAAI;AAEF,YAAM,SAAS,MAAM,gBAAgB,WAAW,aAAa,QAAQ,MAAM;AAE3E,UAAI,OAAO,SAAS;AAClB,eAAO,KAAK,iCAAiC;AAC7C,eAAO,EAAE,SAAS,KAAK;AAAA,MACzB,OAAO;AACL,eAAO,MAAM,0BAA0B,OAAO,KAAK,EAAE;AACrD,eAAO,EAAE,SAAS,OAAO,OAAO,OAAO,MAAM;AAAA,MAC/C;AAAA,IACF,SAAS,OAAO;AACd,aAAO,MAAM,yBAAyB,KAAK,EAAE;AAC7C,aAAO,EAAE,SAAS,OAAO,OAAO,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK,EAAE;AAAA,IACzF;AAAA,EACF;AAAA,EAEA,QAAQ,OAAO,EAAE,OAAO,MAAmB;AACzC,WAAO,MAAM,4BAA4B;AAEzC,QAAI;AAEF,YAAM,SAAS,MAAM,gBAAgB,YAAY,IAAI,MAAM;AAE3D,UAAI,OAAO,WAAW,OAAO,QAAQ;AAEnC,cAAM,YAAY,iBAAiB,OAAO,MAAM;AAChD,eAAO,MAAM,uBAAuB,YAAY,YAAY,WAAW,EAAE;AACzE,eAAO;AAAA,MACT,OAAO;AACL,eAAO,KAAK,wBAAwB,OAAO,KAAK,EAAE;AAClD,eAAO;AAAA,MACT;AAAA,IACF,SAAS,OAAO;AACd,aAAO,MAAM,uBAAuB,KAAK,EAAE;AAC3C,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA,MAAM,OAAO,EAAE,OAAO,MAAmB;AACvC,WAAO,KAAK,qBAAqB;AAEjC,QAAI,CAAC,aAAa,QAAQ;AACxB,aAAO,MAAM,0CAA0C;AACvD,aAAO,EAAE,SAAS,OAAO,OAAO,wBAAwB;AAAA,IAC1D;AAEA,QAAI;AAEF,YAAM,SAAS,MAAM,gBAAgB,UAAU,aAAa,QAAQ,MAAM;AAE1E,UAAI,OAAO,SAAS;AAClB,eAAO,KAAK,iCAAiC;AAC7C,eAAO,EAAE,SAAS,KAAK;AAAA,MACzB,OAAO;AACL,eAAO,MAAM,yBAAyB,OAAO,KAAK,EAAE;AACpD,eAAO,EAAE,SAAS,OAAO,OAAO,OAAO,MAAM;AAAA,MAC/C;AAAA,IACF,SAAS,OAAO;AACd,aAAO,MAAM,yBAAyB,KAAK,EAAE;AAC7C,aAAO,EAAE,SAAS,OAAO,OAAO,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK,EAAE;AAAA,IACzF;AAAA,EACF;AACF;AAGA,eAAe,gBAAgB,SAAiB,QAAgB,QAA6E;AAC3I,SAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,WAAO,MAAM,uBAAuB,OAAO,EAAE;AAE7C,UAAM,mBAAe,4BAAM,cAAc,CAAC,OAAO,GAAG;AAAA,MAClD,OAAO,CAAC,QAAQ,QAAQ,MAAM;AAAA,IAChC,CAAC;AAED,QAAI,SAAS;AACb,QAAI,cAAc;AAElB,iBAAa,OAAO,GAAG,QAAQ,CAAC,SAAS;AACvC,YAAM,QAAQ,KAAK,SAAS;AAC5B,gBAAU;AACV,aAAO,MAAM,iBAAiB,KAAK,EAAE;AAAA,IACvC,CAAC;AAED,iBAAa,OAAO,GAAG,QAAQ,CAAC,SAAS;AACvC,YAAM,QAAQ,KAAK,SAAS;AAC5B,qBAAe;AACf,aAAO,MAAM,iBAAiB,KAAK,EAAE;AAAA,IACvC,CAAC;AAGD,iBAAa,MAAM,MAAM,SAAS,IAAI;AAEtC,iBAAa,GAAG,SAAS,CAAC,SAAS;AACjC,UAAI,SAAS,GAAG;AACd,gBAAQ,EAAE,SAAS,MAAM,OAAO,CAAC;AAAA,MACnC,OAAO;AACL,gBAAQ,EAAE,SAAS,OAAO,OAAO,eAAe,4BAA4B,IAAI,GAAG,CAAC;AAAA,MACtF;AAAA,IACF,CAAC;AAED,iBAAa,GAAG,SAAS,CAAC,UAAU;AAClC,cAAQ,EAAE,SAAS,OAAO,OAAO,MAAM,QAAQ,CAAC;AAAA,IAClD,CAAC;AAAA,EACH,CAAC;AACH;AAGA,eAAe,qBAAqB,QAA4B;AAC9D,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEtC,UAAM,mBAAe,4BAAM,SAAS,CAAC,YAAY,CAAC;AAElD,iBAAa,GAAG,SAAS,CAAC,SAAS;AACjC,UAAI,SAAS,GAAG;AACd,eAAO,KAAK,yBAAyB;AACrC,gBAAQ;AACR;AAAA,MACF;AAGA,aAAO,KAAK,qBAAqB;AACjC,YAAM,qBAAiB,4BAAM,QAAQ,CAAC,sDAAsD,MAAM,GAAG,GAAG;AAAA,QACtG,OAAO,CAAC,UAAU,QAAQ,MAAM;AAAA,MAClC,CAAC;AAED,YAAM,kBAAc,4BAAM,QAAQ,CAAC,GAAG;AAAA,QACpC,OAAO,CAAC,QAAQ,QAAQ,MAAM;AAAA,MAChC,CAAC;AAED,qBAAe,OAAO,KAAK,YAAY,KAAK;AAE5C,UAAI,gBAAgB;AACpB,kBAAY,OAAO,GAAG,QAAQ,CAAC,SAAS;AACtC,yBAAiB,KAAK,SAAS;AAC/B,eAAO,MAAM,kBAAkB,KAAK,SAAS,CAAC,EAAE;AAAA,MAClD,CAAC;AAED,kBAAY,OAAO,GAAG,QAAQ,CAAC,SAAS;AACtC,eAAO,MAAM,yBAAyB,KAAK,SAAS,CAAC,EAAE;AAAA,MACzD,CAAC;AAED,kBAAY,GAAG,SAAS,CAACA,UAAS;AAChC,YAAIA,UAAS,GAAG;AACd,iBAAO,KAAK,8BAA8B;AAC1C,kBAAQ;AAAA,QACV,OAAO;AACL,iBAAO,MAAM,uCAAuCA,KAAI,EAAE;AAC1D,iBAAO,IAAI,MAAM,iCAAiCA,KAAI,EAAE,CAAC;AAAA,QAC3D;AAAA,MACF,CAAC;AAED,qBAAe,GAAG,SAAS,CAAC,UAAU;AACpC,eAAO,KAAK;AAAA,MACd,CAAC;AAAA,IACH,CAAC;AAED,iBAAa,GAAG,SAAS,CAAC,UAAU;AAClC,aAAO,KAAK;AAAA,IACd,CAAC;AAAA,EACH,CAAC;AACH;AAGA,SAAS,iBAAiB,cAA+B;AACvD,MAAI;AAGF,UAAM,cAAc,aAAa,MAAM,gCAAgC;AAEvE,QAAI,aAAa;AACf,YAAM,SAAS,YAAY,CAAC,EAAE,YAAY;AAC1C,aAAO,WAAW;AAAA,IACpB;AAGA,WAAO,aAAa,SAAS,UAAU,KAAK,aAAa,SAAS,uBAAuB;AAAA,EAC3F,SAAS,OAAO;AACd,WAAO;AAAA,EACT;AACF;","names":["code"]}